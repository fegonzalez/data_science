############################################################################
#
# Index
#
############################################################################
1) Principles of Analytic Graphics
2) Exploratory graphs
3) Plotting Systems in R
4) The Process of Making a Plot
5) Graphics Device ( ?Devices )
6) The Base Plotting System in R
7) The Lattice Plotting System
8) ggplot2 Plotting System

Annex 1) Making up the data
Annex 2) Glossary 2 Spanish
Annex 3) References
############################################################################


##--------------------------------------------------------------------------
## 1) Principles of Analytic Graphics
##--------------------------------------------------------------------------

   Principle 1: Show comparisons (Always ask "Compared to What?")

   Principle 2: Show causality, mechanism, explanation, systematic structure
                (What is your causal framework for thinking about a question?)

   Principle 3: Show multivariate data (more than 2 variables)

   Principle 4: Integrate multiple modes of evidence (words, numbers, images ..)

   Principle 5: Describe and document the evidence with appropriate labels,
                scales, sources, etc.
                A data graphic should tell a complete story that is credible

   Principle 6: Content is king (presentation is the servant)


##--------------------------------------------------------------------------
## 2) Exploratory graphs
##--------------------------------------------------------------------------

   Goal: Development graphs (quick & dirty)


2.1) Simple Summaries of Data

a) One dimension functions:
summary()
boxplot()
hist()
barplot()
Density plot

## e.g.
## hist(pollution$pm25, col = "green")
## rug(pollution$pm25)
## abline(v = median(pollution$pm25), col = "magenta", lwd = 4)
## abline(h = 12, lwd = 2, lty = 2)
## barplot(table(pollution$region), col = "wheat", main = "Counties per Region")

b) Two dimensions

    b.1) Multiple/overlayed 1-D plots (Lattice/ggplot2)
    b.2) Scatterplots
    b.3) Smooth scatterplots

## b.1)
## boxplot(pm25 ~ region, data = pollution, col = "red")
## b.2)
## par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))
## hist(subset(pollution, region == "east")$pm25, col = "green")
## hist(subset(pollution, region == "west")$pm25, col = "green")

## b.3)
## par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
## with(subset(pollution, region == "west"), plot(latitude, pm25, main ="West"))
## with(subset(pollution, region == "east"), plot(latitude, pm25, main ="East"))
## with(pollution, plot(latitude, pm25, col = region))

c) >2 dimensions

    Overlayed/multiple 2-D plots; coplots
    Use color, size, shape to add dimensions
    Spinning plots
    Actual 3-D plots (not that useful)


*) Overlaying Features:
abline() # Add Straight Lines to a Plot (v=vertical, h=horizontal)
rug()    # Add a rug to a plot



##--------------------------------------------------------------------------
## 3) Plotting Systems in R
##--------------------------------------------------------------------------

3.1) Base: "artist's palette" (graphic step by step) model.
     BAD) Can’t go back once plot has started

3.2) library(lattice): entire plot specified by one function
     BAD) Sometimes awkward to specify an entire plot in a single function call
     BAD) Cannot "add" to the plot once it is created

## state <- data.frame(state.x77, region = state.region)
## xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))

3.3) library(ggplot2): Mixes elements of Base and Lattice

## qplot(displ, hwy, data = mpg)


WARNING   The systems can not be mixed !


##--------------------------------------------------------------------------
## 4) The Process of Making a Plot
##--------------------------------------------------------------------------

a) Where will the plot be made? On the screen? In a file?

b) How will the plot be used?

    ? Is the plot for viewing temporarily on the screen?
    ? Will it be presented in a web browser?
    ? Will it eventually end up in a paper that might be printed?
    ? Are you using it in a presentation?

c) Size of data into the plot?

d) Do you need to be able to dynamically resize the graphic?

e) What graphics system will you use: base, lattice, or ggplot2?


##--------------------------------------------------------------------------
## 5) Graphics Device ( ?Devices )
##--------------------------------------------------------------------------

A graphics device is something where you can make a plot appear

When you make a plot in R, it has to be "sent" to a specific graphics device


5.1) Types of Graphics devices

  a) Screen devices: quartz() (MAC), x11() (Linux), windows

  b) File Devices

    b1) Vector formats (pdf, svg, ps, win.metafile)

        GOOD: resize well.
        GOOD: line drawings and solid colors using a modest number of points
        BAD: plot with many objects/points

    b2) Bitmap formats (png, jpeg, tiff, bmp)

        GOOD: large number of points, natural scenes or web-based plots
        BAD: line-type graphics, resize.


5.2) How Does a Plot Get Created?  (screen devices)

  a) Call a plotting function like plot, xyplot, or qplot
     The plot appears on the screen device

  b) Annotate plot if necessary


5.3) How Does a Plot Get Created?  (file devices)

  a) EXPLICITLY launch a graphics device

  ## pdf(file = "myplot.pdf") # file created in my working directory

  b) Call a plotting function to make a plot (no plot will appear on the screen)

  ## with(faithful, plot(eruptions, waiting));

  c) Annotate plot if necessary

  ## title(main = "Old Faithful Geyser data");  #still nothing on screen

  d) EXPLICITLY CLOSE graphics device with dev.off() (THIS IS VERY IMPORTANT!)

  ## dev.off()  ## Close the PDF file device
                ## Now you can view the file 'myplot.pdf' on your computer


5.4) Multiple Open Graphics Devices

* It is possible to open multiple graphics devices (screen, file, or both)

* Plotting can only occur on one graphics device at a time

* ?dev.cur
* dev.cur() : currently active graphics device =  2, 3, ...
* dev.set(<integer>) : change the active graphics device
* dev.off() : close current device


5.5) Copying plots

* dev.copy: copy a plot from one device to another
* dev.copy2pdf

## Example:
## copy_plot_test <- function()
## {
##     dev.cur();
##     with(faithful, plot(eruptions, waiting))  ## Create plot on screen device
##     dev.cur()
##     title(main = "Old Faithful Geyser data")  ## annotate
##     dev.cur()
##     dev.copy(png, file = "geyserplot.png")    ## Copy plot to a PNG file
##     dev.cur()
##     dev.off()  ## Don't forget to close the PNG device!
##     dev.cur()
## }


##--------------------------------------------------------------------------
## 6) The Base Plotting System in R
##--------------------------------------------------------------------------

* library(graphics): plotting functions (plot, hist, ...)

* library(grDevices): contains all the code implementing the various graphics
                      devices, including X11, PDF, PostScript, PNG, etc.

* There are two phases to creating a base plot

  i) Initializing a new plot
  ii) Annotating (adding to) an existing plot


6.1) Graphic Parameters

    pch: the plotting symbol (default is open circle)

    lty: the line type (default is solid line), can be dashed, dotted, etc.

    lwd: the line width, specified as an integer multiple

    col: the plotting color, specified as a number, string, or hex code;
         the colors() function gives you a vector of colors by name

    xlab: character string for the x-axis label

    ylab: character string for the y-axis label

    type: "y" plot & put the data in the plot;
          "n" plot but not put the data yet -> blank plot (add "points" later)


6.1.1) The par() function

It is used to specify global graphics parameters that affect all plots in an R
session. These parameters can be overridden when specified as arguments to
specific plotting functions.

    las: the orientation of the axis labels on the plot

    bg: the background color

    mar: the margin size (lines): c(bottom, left, top, right)

    oma: the outer margin size (default is 0 for all sides)

    mfrow: number of plots per row, column (plots are filled row-wise)
    mfcol: number of plots per row, column (plots are filled column-wise)


Use par("param_name") to see the parameter value (par("lty"))

## Example:
##
## par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
## with(subset(pollution, region == "west"), plot(latitude, pm25, main ="West"))


6.2) Base Plotting Functions

    plot: make a scatterplot, or other type of plot depending on the class of
          the object being plotted

    lines: add lines to a plot, given a vector x values and a vector of y values
           (or a 2-column matrix); this function just connects the dots
           ## plot(cars, main = "lowess(cars)")
           ## lines(lowess(cars), col = 2)

    points: add points to a plot  { example(points) }

    text: add text labels to a plot using specified x, y coordinates

    title: add annotations to x, y axis labels, title, subtitle, outer margin

    mtext: add arbitrary text to the margins (inner or outer) of the plot

    axis: adding axis ticks/labels

## Example:
##
## plot_test <- function()
## {
##     library(datasets);
##     par(mfcol = c(1,1), mar = c(5, 4, 2, 1));
##     with(airquality,
##          plot(Wind,Ozone,
##               main = "Ozone and Wind in New York City",
##               type = "n"))
##     with(subset(airquality, Month == 5),
##          points(Wind, Ozone, pch=1, col = "blue"))
##     with(subset(airquality, Month != 5),
##          points(Wind, Ozone, pch=4, col = "red"))

##     legend("topright",
##            pch = c(1,4),
##            col = c("blue", "red"),
##            legend = c("May", "Other Months"));
## }

## Example:
## multiplebase_plot_test <- function()
## {
##   library(datasets);
##   par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0));
##   ##to see the result step by step
##   plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind");
##   plot(airquality$Solar, airquality$Ozone,
##        main = "Ozone and Solar Radiation");
##   plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
##   mtext("Ozone and Weather in New York City", outer = TRUE)
## }

6.3) Complex plotting

a) layout()



##--------------------------------------------------------------------------
## 7) The Lattice Plotting System
##--------------------------------------------------------------------------

* library(lattice): plotting functions independent of the “base” graphics system

* library(grid): implements a different & independent graphing system.
                 The lattice package builds on top of grid.

* One phase: all plotting/annotation is done at once with a single function call

* Good for putting many many plots on a screen to compare them
  (see e.g. 'customize_panel' at the end)


7.1) Lattice Functions

       << lattice_function (oy_var ~ ox_var | f * g, data) >>

     - f and g are conditioning variables — they are optional.

     - The * indicates an interaction between two variables.

     - data: if no one is passed, then the parent frame is used.

    (e.g.) xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5, 1))

    Produces a set of 5 panels showing the relationship between Ozone and Wind
    for each month (one panel per month).


    xyplot: this is the main function for creating scatterplots.

    bwplot: box-and-whiskers plots (“boxplots”)

    histogram: histograms

    stripplot: like a boxplot but with actual points

    dotplot: plot dots on "violin strings"

    splom: scatterplot matrix; like pairs in base plotting system.

    levelplot, contourplot: for plotting "image" data

## e.g.
## library(lattice)
## library(datasets)
## xyplot(Ozone ~ Wind, data = airquality)
## airquality <- transform(airquality, Month = factor(Month))
## xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5, 1))


7.2) Lattice Behavior

  Lattice vs base graphics functions.

* Base graphics functions plot data directly to the graphics device (screen,
PDF file, etc.)

* Lattice graphics functions return an object of class trellis.

* The print methods for lattice functions actually do the work of plotting the
data on the graphics device.

* Lattice functions return "plot objects" that can, in principle, be stored
(but it’s usually better to just save the code + data).

* On the command line, trellis objects are auto-printed so that it appears the
function is plotting the data.

## p <- xyplot(Ozone ~ Wind, data = airquality)  ## Nothing happens!
## class(p) # [1] "trellis"
## print(p)                                      ## Plot appears


7.3) Lattice Panel Functions

* The panel function controls what happens inside each panel of the plot.

* Panel functions receive the x/y coordinates of the data points in their panel
(along with any optional arguments)


7.3.1) Customizing 'panel' functions.

       1) call default panel function (panel.abline, panel.lmline, ...)
       2) overlay functions

## e.g. customize_panel
##
## customize_panel <- function(x, y, ...)
## {
##     panel.xyplot(x, y, ...)                # 1) call default panel function
##     panel.abline(h = median(x), lty = 2);  # 2) overlay
##     panel.lmline(x, y, col = 2);
## }
## airquality <- transform(airquality, Month = factor(Month))
## xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5, 1),
##        panel=customize_panel);



7.) Graphical Parameters for Trellis Displays

* trellis.par.set()

Description:

Functions used to query, display and modify graphical parameters for fine
control of Trellis displays.  Modifications are made to the settings for the
currently active device only.





##--------------------------------------------------------------------------
## 8) ggplot2 Plotting System (library(ggplot2)
##--------------------------------------------------------------------------

* Split the difference between base and lattice

* Automatically deals with spacings, text, titles but also allows you to
  annotate by “adding”


8.1) The Basics: qplot()

* Plots are made up of AESTHETICS (size, shape, color) and GEOMS (points, lines)

* Factors are important for indicating subsets of the data (if they are to have
  different properties); they should be labeled.

* Use 'ggplot()' for doing things 'qplot()' cannot do.

* params:

    - qplot(x, y, ...): plot = point y ~ x

    - qplot(x, ...):    plot = histogram(x)


8.1.1) qplot() example

## library(ggplot2)
## str(mpg)
## qplot(x=displ, y=hwy, data=mpg)

## Note.- levels(mpg$drv) =  "4" "f" "r"

a) Modifying aesthetics (size, shape, color)
## qplot(displ, hwy, data = mpg, color = drv) # color = mpg$drv
## qplot(displ, hwy, data = mpg, shape = drv) # shape = mpg$drv
## qplot(displ, hwy, data = mpg, size=drv, color=drv)

b) Adding a geom (points, lines)
## qplot(log(hwy), data = mpg, geom="density")
## qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), method="lm")

c) Histograms
## qplot(x=log(hwy), data = mpg)
## qplot(x=log(hwy), data = mpg, fill = drv) # Histograms by group

d) Facets (conditional plots: layout of rows & cols)
## qplot(displ, hwy, data = mpg, facets = . ~ drv)      # 3 cols (. ~ drv)
## qplot(hwy, data = mpg, facets = drv ~ ., binwidth=2) # 3 rows (drv ~ .)
## qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), method="lm",
##       facets = . ~ drv)


8.2) The Advanced: ggplot()

* Plots are built up in layers (simimar to 'The Base Plotting System')

    1) Plot the data
    2) Overlay a summary
    3) Metadata and annotation

* New components:

  - stats: statistical transformations like binning, quantiles, smoothing.

  - scales: what scale an aesthetic map uses (example: male=red, female=blue).
    coordinate system


8.1.1) ggplot() example


## MAACS data
## load("./data/maacs.Rda")
## ls()
## [1] "maacs"
## head(maacs)
## str(maacs)

a) Basic plot
qplot(x=log(pm25), y=NocturnalSympt, data = maacs, facets = . ~ bmicat, geom = c("point", "smooth"), method = "lm")



############################################################################
#
# Glossary 2 Spanish
#
############################################################################

tidy: ordenado

thorough: minucioso

Scatter: dispersión


############################################################################
#
# References
#
############################################################################


[1] Principles of Analytic Graphics

[1.1] Edward Tufte (2006). Beautiful Evidence, Graphics Press LLC. - www.edwardtufte.com


[2] Exploratory graphs

[2.1] R Graph Gallery - http://gallery.r-enthusiasts.com/

[2.2] R Bloggers - http://www.r-bloggers.com/


[3] Plotting Systems in R

[3.1] Paul Murrell (2011). R Graphics, CRC Press.

[3.2] Hadley Wickham (2009). ggplot2, Springer.


[8] ggplot2 Plotting System

[8.1] The ggplot2 book - Hadley  Wickham

[8.2] The R Graphics Cookbook - Winston Chang

[8.2] ggplot2 web site - http://ggplot2.org
