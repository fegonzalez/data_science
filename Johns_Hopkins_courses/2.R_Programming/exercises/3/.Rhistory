?matrix
my_matrix2 <- matrix(nrow = 4, ncol=5, 1:20)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
?cbind
patients
my_matrix2
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
play()
?matrix
x
class(x)
y
z
x
x=1:20
x
dim(x)
x
nx
dim(x)=c(5,4)
x
dimnames(x)
dimnames(x)
dimnames(x) <- list(c("row1", "row2"), c("col1", "col2", "col3"))
dimnames(x) <- list(c("row1", "row2"), c("col1", "col2", "col3", "col4", "col5"))
dimnames(x) <- list(c("row1", "row2"), c("col1", "col2", "col3", "col4"))
dimnames(x) <- list(c("row1", "row2", "r3", "r4", "r5"), c("col1", "col2", "col3", "col4"))
x
class(x)
nxt()
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
my_data
class(my_data)
attributes(my_data)
colnames(my_data)
colnames(my_data) = cnames
colnames(my_data)
cnames
colnames(my_data) <- cnames
cnames
colnames(my_data)
my_data
TRUE==TRUE
F==T
(F==T)==F
(FALSE == TRUE) == FALSE
6==7
skip
skip()
skip()
5!=7
skip()
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
c(TRUE, TRUE, TRUE) & c(TRUE, FALSE, FALSE)
c(TRUE, TRUE, TRUE) && c(TRUE, FALSE, FALSE)
c(TRUE, TRUE, TRUE) && c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
T | c(T,F,F)
skip()
skip()
skip()
isTRUE(6 > 4)
skip()
?xor
xor(3,4)
xor(3,0)
xor(T,T)
xor(T,F)
xor(5 == 6, !FALSE)
?sample
ints <- sample(10)
ints
ints>5
which
which(ints>7)
any(ints)
all(ints)
ints
any(ints<0)
all(ints>0)
quit()
swirl()
library(swirl)
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
as.character.Date(d1)
d2 <- as.Date("1969-01-01")
class(d2)
unclass(d2)
Sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
unclass(t2)
t2
t1
unclass(t1)
unclass(t2)
?str
str(unclass(x))
str(unclass(t2))
t2$min
weekdays(d1)
month(t1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
ls()
ls(plants)
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
?summary
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
head(flags)
str(object = flags)
dim(flags)
viewinfo()
class(flags)
library(swirl)
swirl()
flags
str(flags)
cls_list <-lapply(flags, class)
cls_list
colums(flags)
colnames(flags)
class(lapply)
class(cls_list)
play()
?lapply
nxt()
as.character(cls_list)
cls_vect <- sapply(flags)
cls_vect <- sapply(flags, class)
class(cls_vect)
play()
class(cls_list)
nxt()
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
head(flag_colors)
lapply(flag_colors
, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, reange)
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_flags, length)
lapply(unique_vals, length)
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
library(swirl)
swirl()
?sample()
play()
ls()
sample(10,5)
sample(10,5, replace=TRUE)
sample(10,23, replace=TRUE)
sample(10,23, replace=FALSE)
sample(1:2:40,11, replace=FALSE)
1:2
1:40:2
?:
?%:%
??:
?
?
:
sample(1:10)
sample(1:10, TRUE)
sample(1:10,replace = TRUE)
sample(1:10, TRUE)
x= 1:10
x
sample(x[x>6])
sample(x[x>6], 6)
sample(x[x>6], 6, replace=T)
nxt()
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10)
?LETTERS
pi
letters
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace=TRUE,prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, 100, c(0.7))
rbinom(1, size=100, prob=c(0.7))
rbinom(1, size=100, prob=0.7)
sample(c(0,1), 100, replace=TRUE,prob = c(0.3, 0.7))
sum(sample(c(0,1), 100, replace=TRUE,prob = c(0.3, 0.7)))
flips2 <- rbinom(n = 100, size=1, prob=0.7)
sample(c(0,1), 100, replace=TRUE,prob = c(0.3, 0.7))
flips2
sum(sample(c(0,1), 100, replace=TRUE,prob = c(0.3, 0.7)))
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean=100, sd=25)
?rpois
rpois(5,lambda = 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm = colMeans(my_pois)
cm <- colMeans(my_pois)
cm
hist(cm)
data(cars)
?data
?cars
head(cars)
plot(cars)
?plot
View(cars)
plot(x = cars$speed, y = cars$dist)
a <- 3
a
plot(y = cars$speed, x = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main="My Plot")
plot(cars, main="My Plot", title="My Plot Subtitle")
plot(cars,sub="My Plot Subtitle")
plot(cars,col=2)
plot(cars,ylim = c(10,15))
plot(cars,xlim = c(10,15))
?points
plot(cars, pch=2)
load(mtcars)
load(cars)
data(mtcars)
play()
str(mtcars)
dim(mtcars)
nxt()
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
swirl()
quit()
?lappy
?lapply
?apply
lapply
x <- list(a = 1:5, b = rnorm(10))
lapply(x, mean)
sapply(x, mean)
tapply(x, mean, vector)
?vapply
vapply(x, mean, vector)
vapply(x, mean, numeric)
vapply(x, mean, numeric(1))
lapply(x, mean,... = )
lapply(x, mean, min =0, max=10)
lapply(x, mean, min =0, max=2)
lapply(x, function(elt) elt[,1])
ncol(x)
class(x)
x
str(x)
lapply(x, function(elt) elt[1])
x
str(apply)
x <- matrix(rnorm(200), 20, 10)
x
x <- matrix(rnorm(200), 4, 4)
x
apply(x,1:4,mean)
x <- matrix(1:16, 4, 4)
x
apply(x,1,mean)
apply(x,1,sum)
apply(x,1,mean)
apply(x,2,mean)
apply(x,20,mean)
apply(x,4,mean)
apply(x,3,mean)
apply(x,0,mean)
apply(x,2,mean)
apply(x,1,mean)
?apply
str(mapply)
str(lapply)
x
lapply(x, mean)
str(mapply)
?rep
rep(1,4)
mapply(rep, 1:4, 4:1)
1:5
?gl
gl(3,10)
f <- gl(3,10)
f
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
tapply(X = x, INDEX = f,FUN = mena)
tapply(X = x, INDEX = f,FUN = mean)
tapply(X = x, INDEX = f,FUN = range)
tapply(X = x, INDEX = f,FUN = range,simplify = TRUE)
?factor
x <- factor(c("yes", "yes", "no", "yes", "no"))
class(x)
x
v <- 1:6
v
factor(v)
factor(v,labels = "A":"Z")
factor(v,labels = "A:Z")
factor(v,labels = "A")
factor(v,labels = "label")
factor(v,labels = "a")
factor(v,labels = "a",ordered = FALSE)
factor(v,labels = "a",ordered = FALSE)
factor(v[1:3,4:6],labels = "a",ordered = FALSE)
v[1:3]
factor(v[1:3]:v[4:6],labels = "a",ordered = FALSE)
factor(v[1:3]:v[4:6],labels = "a",ordered = FALSE)
factor(v[1:3,4:6],letters)
factor(v,letters)
factor(v,letters, labels = "a")
factor(v,letters(1:6), labels = "a")
factor(v,letters[1:6], labels = "a")
lm()
?lm
str(split)
?split
x
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
split(x,f =
)
f <- gl(3,10)
f
?runif
split(x,f)
?split
split(x,f)
lapply(split(x,f), mean)
library(dataset)
library(datasets)
datasets
?datasets
str(datasets)
info(datasets)
head(airquality)
s  <- split(airquality, airquality$Month)
s
s  <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
colMeans(x[, c("Ozone", "Solar.R", "Wind")])
colMeans(s[, c("Ozone", "Solar.R", "Wind")])
s
class(s)
colMeans(s[, c("Ozone", "Solar.R", "Wind")])
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
clear
airquality
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
f1 <- gl(2, 5)
f2 <- gl(5, 2)
f1
f2
interaction(f1, f2)
?interaction
f1
f2
list(f1,f2)
split(x, list(f1,f2))
x
x <- rnorm(10)
split(x, list(f1,f2))
list(f1,f2)
str(split(x, list(f1,f2)))
quit()
message()
?message
condition()
?condition
log(-1)
?
?
d
??hh
?invisible
getwd()
printmessage(3)
getwd()
list.files()
load(debug_lesson)
source('~/u/workspace/R/workdir/debug_lesson.R', echo=TRUE)
printmessage(3)
printmessage(0)
x
printmesage(NA)
printmessage(NA)
printmessage(nan)
printmessage(1/0)
printmessage(0/0)
printmessage2(NA)
source('~/u/workspace/R/workdir/debug_lesson.R', echo=TRUE)
printmessage2(NA)
x <- log(-1)
x
printmessage2(x)
log(-1)
?stopifnot
system.time(printmessage2(x))
system.time({    n <- 1000    r <- numeric(n)    for (i in 1:n) {        x <- rnorm(n)        r[i] <- mean(x)    }})
system.time({    n <- 1000    r <- numeric(n)    for (i in 1:n) {        x <- rnorm(n)        r[i] <- mean(x)    }})
setwd("~/u/workspace/R/workdir/coursera_r_course/exercises/3")
ls()
source('~/u/workspace/R/workdir/coursera_r_course/exercises/3/rankall.R', echo=TRUE)
rankall("pneumonia", "worst")
source('~/u/workspace/R/workdir/coursera_r_course/exercises/3/rankall.R', echo=TRUE)
source('~/u/workspace/R/workdir/coursera_r_course/exercises/3/rankall.R', echo=TRUE)
rankall("pneumonia", "worst")
source('~/u/workspace/R/workdir/coursera_r_course/exercises/3/rankall.R', echo=TRUE)
rankall("pneumonia", "worst")
rankall("heart failure")
num
ordered_vector
input_data_set
input_data_set[[outcome_col_name]]
input_data_set$State
source('~/u/workspace/R/workdir/coursera_r_course/exercises/3/rankall.R', echo=TRUE)
rankall("heart failure")
input_data_set$State
num
input_data_set
head(input_data_set,3)
input_data_set$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
min(input_data_set$Hospital.30.Day.Death..Mortality..Rates.from.Hear)t.Failure
min(input_data_set$Hospital.30.Day.Death..Mortality..Rates.from.Hear)t.Failure
min(input_data_set$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
head(input_data_set,3)
head(input_data_set,3)
input_data_set
input_data_set$Hospital.Name
match(x = input_data_set$Hospital.Name, "AURORA ST LUKES MEDICAL CENTER")
head(input_data_set,54)
input_data_set[54]
input_data_set[54,]
input_data_set[3,]
source('~/u/workspace/R/workdir/coursera_r_course/exercises/3/rankall.R', echo=TRUE)
source('~/u/workspace/R/workdir/coursera_r_course/exercises/3/rankall.R', echo=TRUE)
source('~/u/workspace/R/workdir/coursera_r_course/exercises/3/rankall.R', echo=TRUE)
rankall("heart failure")
source('~/u/workspace/R/workdir/coursera_r_course/exercises/3/rankall.R', echo=TRUE)
source('~/u/workspace/R/workdir/coursera_r_course/exercises/3/rankall.R', echo=TRUE)
source('~/u/workspace/R/workdir/coursera_r_course/exercises/3/rankall.R', echo=TRUE)
rankall("heart failure")
source('~/u/workspace/R/workdir/coursera_r_course/exercises/3/rankall.R', echo=TRUE)
rankall("heart failure")
source('~/u/workspace/R/workdir/coursera_r_course/exercises/3/best_test.R', echo=TRUE)
source('~/u/workspace/R/workdir/coursera_r_course/exercises/3/best_test.R', echo=TRUE)
make_best_test()
source('~/u/workspace/R/workdir/coursera_r_course/exercises/3/submitscript3.R', echo=TRUE)
submit()
submit()
submit()
