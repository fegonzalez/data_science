[1] "test 1: void matrix"
[1] "my_cachematrix <- makeCacheMatrix()"
[1] "my_cachematrix$get()"
     [,1]
[1,]   NA
[1] "my_cachematrix$getInverse()"
NULL
[1] "invertible matrix been solved"
[1] "test 2: square invertible matrix, dim = 3 3"
[1] "my_cachematrix$set(m33)"
[1] "test 2.1.- New calculation: cacheSolve(my_cache matrix);"
[1] "invertible matrix been solved"
[1] "my_cachematrix$get();"
     [,1] [,2] [,3]
[1,]    8    1    6
[2,]    3    5    7
[3,]    4    9    2
[1] "my_cachematrix$getInverse();"
            [,1]        [,2]        [,3]
[1,]  0.14722222 -0.14444444  0.06388889
[2,] -0.06111111  0.02222222  0.10555556
[3,] -0.01944444  0.18888889 -0.10277778
[1] "test 2.2.- Already calculated: cacheSolve(my_cache matrix);"
[1] "using cached value."
[1] "identical(my_cachematrix$getInverse(), solve(m33))"
[1] "test 3: singular (non-invertible) matrix"
[1] "my_cachematrix$get();"
     [,1] [,2]
[1,]    1    1
[2,]    0    0
[1] "my_cachematrix$getInverse();"
NULL
[1] "Singular matrix: cacheSolve(my_cache matrix); (set to NULL"
[1] "invertible matrix been solved"
[1] "cacheSolve error: << Error in solve.default(data, ...): Lapack routine dgesv: system is exactly singular: U[2,2] = 0\n >> setting the inverse to NULL"
[1] "Inverse value set to NULL."
[1] "my_cachematrix$get();"
     [,1] [,2]
[1,]    1    1
[2,]    0    0
[1] "my_cachematrix$getInverse();"
NULL
[1] "test 4: non-square (non-invertible) matrix, dim = 1 3"
[1] "my_cachematrix$set(matrix(c(8,3,4), nrow = 1, ncol = 3))"
[1] "test 4.1.- New calculation: cacheSolve(my_cache matrix);"
[1] "non-squared matrix"
[1] "my_cachematrix$get();"
     [,1] [,2] [,3]
[1,]    8    3    4
[1] "my_cachematrix$getInverse();"
NULL
[1] "test 4.2.- Already calculated: cacheSolve(my_cache matrix);"
[1] "non-squared matrix"
[1] "test 5: invalid data (not a matrix)"
[1] "... so the stored matrix didn't change."
[1] "my_cachematrix$get()"
     [,1] [,2] [,3]
[1,]    8    3    4
[1] "my_cachematrix$getInverse()"
NULL
[1] "Singular matrix: cacheSolve(my_cache matrix)"
[1] "Test error: << Error in x$get: $ operator is invalid for atomic vectors\n >>"
